{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es.set.js","webpack:///./node_modules/core-js/modules/es.string.search.js","webpack:///../../../src/components/VTreeview/VTreeviewNode.ts","webpack:///../../../../src/components/VTreeview/util/filterTreeItems.ts","webpack:///../../../src/components/VTreeview/VTreeview.ts"],"names":["collection","collectionStrong","module","exports","init","this","arguments","length","undefined","fixRegExpWellKnownSymbolLogic","anObject","requireObjectCoercible","sameValue","regExpExec","SEARCH","nativeSearch","maybeCallNative","regexp","O","searcher","call","RegExp","String","res","done","value","rx","S","previousLastIndex","lastIndex","result","index","baseMixins","mixins","VTreeviewNodeProps","activatable","activeClass","type","default","color","expandIcon","indeterminateIcon","itemChildren","itemDisabled","itemKey","itemText","loadChildren","loadingIcon","offIcon","onIcon","openOnClick","rounded","selectable","selectedColor","shaped","transition","selectionType","validator","v","includes","VTreeviewNode","name","inject","treeview","props","level","item","parentIsDisabled","data","hasLoaded","isActive","isIndeterminate","isLoading","isOpen","isSelected","computed","disabled","key","children","text","scopedProps","leaf","selected","indeterminate","active","open","computedIcon","hasChildren","created","beforeDestroy","methods","checkChildren","Promise","resolve","genLabel","$scopedSlots","label","$createElement","slot","staticClass","genPrependSlot","prepend","genAppendSlot","append","genContent","genToggle","VIcon","class","on","click","e","genCheckbox","genLevel","genNode","setTextColor","genChild","scopedSlots","genChildrenWrapper","map","c","genTransition","render","h","isExcluded","attrs","search","filter","match","i","filterTreeItems","excluded","provide","dense","hoverable","items","multipleActive","openAll","returnObject","activeCache","nodes","openCache","selectedCache","Set","excludedItems","watch","handler","oldKeys","Object","k","newKeys","getKeys","diff","oldSelectedCache","emitSelected","deep","getValue","mounted","$slots","console","updateAll","keys","buildTree","parent","oldNode","hasOwnProperty","vnode","node","calculateState","add","state","counts","Boolean","emitOpen","emitActive","emitNodeCache","handleNodeCacheWatcher","old","updateFn","emitFn","getDescendants","descendants","getParents","parents","register","unregister","isParent","updateActive","delete","updateSelected","isForced","changed","descendant","calculated","updateOpen","updateVnodeState","has","themeClasses"],"mappings":"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","file":"js/chunk-49115233.329188c6.js","sourcesContent":["'use strict';\nvar collection = require('../internals/collection');\nvar collectionStrong = require('../internals/collection-strong');\n\n// `Set` constructor\n// https://tc39.github.io/ecma262/#sec-set-objects\nmodule.exports = collection('Set', function (init) {\n  return function Set() { return init(this, arguments.length ? arguments[0] : undefined); };\n}, collectionStrong);\n","'use strict';\nvar fixRegExpWellKnownSymbolLogic = require('../internals/fix-regexp-well-known-symbol-logic');\nvar anObject = require('../internals/an-object');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar sameValue = require('../internals/same-value');\nvar regExpExec = require('../internals/regexp-exec-abstract');\n\n// @@search logic\nfixRegExpWellKnownSymbolLogic('search', 1, function (SEARCH, nativeSearch, maybeCallNative) {\n  return [\n    // `String.prototype.search` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.search\n    function search(regexp) {\n      var O = requireObjectCoercible(this);\n      var searcher = regexp == undefined ? undefined : regexp[SEARCH];\n      return searcher !== undefined ? searcher.call(regexp, O) : new RegExp(regexp)[SEARCH](String(O));\n    },\n    // `RegExp.prototype[@@search]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@search\n    function (regexp) {\n      var res = maybeCallNative(nativeSearch, regexp, this);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n\n      var previousLastIndex = rx.lastIndex;\n      if (!sameValue(previousLastIndex, 0)) rx.lastIndex = 0;\n      var result = regExpExec(rx, S);\n      if (!sameValue(rx.lastIndex, previousLastIndex)) rx.lastIndex = previousLastIndex;\n      return result === null ? -1 : result.index;\n    }\n  ];\n});\n","// Components\nimport { VExpandTransition } from '../transitions'\nimport { VIcon } from '../VIcon'\nimport VTreeview from './VTreeview'\n\n// Mixins\nimport { inject as RegistrableInject } from '../../mixins/registrable'\nimport Colorable from '../../mixins/colorable'\n\n// Utils\nimport mixins, { ExtractVue } from '../../util/mixins'\nimport { getObjectValueByPath, createRange } from '../../util/helpers'\n\n// Types\nimport { VNode, PropType } from 'vue'\n\ntype VTreeViewInstance = InstanceType<typeof VTreeview>\n\nconst baseMixins = mixins(\n  Colorable,\n  RegistrableInject('treeview')\n)\n\ninterface options extends ExtractVue<typeof baseMixins> {\n  treeview: VTreeViewInstance\n}\n\nexport const VTreeviewNodeProps = {\n  activatable: Boolean,\n  activeClass: {\n    type: String,\n    default: 'v-treeview-node--active',\n  },\n  color: {\n    type: String,\n    default: 'primary',\n  },\n  expandIcon: {\n    type: String,\n    default: '$subgroup',\n  },\n  indeterminateIcon: {\n    type: String,\n    default: '$checkboxIndeterminate',\n  },\n  itemChildren: {\n    type: String,\n    default: 'children',\n  },\n  itemDisabled: {\n    type: String,\n    default: 'disabled',\n  },\n  itemKey: {\n    type: String,\n    default: 'id',\n  },\n  itemText: {\n    type: String,\n    default: 'name',\n  },\n  loadChildren: Function as PropType<(item: any) => Promise<void>>,\n  loadingIcon: {\n    type: String,\n    default: '$loading',\n  },\n  offIcon: {\n    type: String,\n    default: '$checkboxOff',\n  },\n  onIcon: {\n    type: String,\n    default: '$checkboxOn',\n  },\n  openOnClick: Boolean,\n  rounded: Boolean,\n  selectable: Boolean,\n  selectedColor: {\n    type: String,\n    default: 'accent',\n  },\n  shaped: Boolean,\n  transition: Boolean,\n  selectionType: {\n    type: String as PropType<'leaf' | 'independent'>,\n    default: 'leaf',\n    validator: (v: string) => ['leaf', 'independent'].includes(v),\n  },\n}\n\n/* @vue/component */\nconst VTreeviewNode = baseMixins.extend<options>().extend({\n  name: 'v-treeview-node',\n\n  inject: {\n    treeview: {\n      default: null,\n    },\n  },\n\n  props: {\n    level: Number,\n    item: {\n      type: Object,\n      default: () => null,\n    },\n    parentIsDisabled: Boolean,\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    hasLoaded: false,\n    isActive: false, // Node is selected (row)\n    isIndeterminate: false, // Node has at least one selected child\n    isLoading: false,\n    isOpen: false, // Node is open/expanded\n    isSelected: false, // Node is selected (checkbox)\n  }),\n\n  computed: {\n    disabled (): boolean {\n      return (\n        getObjectValueByPath(this.item, this.itemDisabled) ||\n        (this.parentIsDisabled && this.selectionType === 'leaf')\n      )\n    },\n    key (): string {\n      return getObjectValueByPath(this.item, this.itemKey)\n    },\n    children (): any[] | null {\n      return getObjectValueByPath(this.item, this.itemChildren)\n    },\n    text (): string {\n      return getObjectValueByPath(this.item, this.itemText)\n    },\n    scopedProps (): object {\n      return {\n        item: this.item,\n        leaf: !this.children,\n        selected: this.isSelected,\n        indeterminate: this.isIndeterminate,\n        active: this.isActive,\n        open: this.isOpen,\n      }\n    },\n    computedIcon (): string {\n      if (this.isIndeterminate) return this.indeterminateIcon\n      else if (this.isSelected) return this.onIcon\n      else return this.offIcon\n    },\n    hasChildren (): boolean {\n      return !!this.children && (!!this.children.length || !!this.loadChildren)\n    },\n  },\n\n  created () {\n    this.treeview.register(this)\n  },\n\n  beforeDestroy () {\n    this.treeview.unregister(this)\n  },\n\n  methods: {\n    checkChildren (): Promise<void> {\n      return new Promise<void>(resolve => {\n        // TODO: Potential issue with always trying\n        // to load children if response is empty?\n        if (!this.children || this.children.length || !this.loadChildren || this.hasLoaded) return resolve()\n\n        this.isLoading = true\n        resolve(this.loadChildren(this.item))\n      }).then(() => {\n        this.isLoading = false\n        this.hasLoaded = true\n      })\n    },\n    open () {\n      this.isOpen = !this.isOpen\n      this.treeview.updateOpen(this.key, this.isOpen)\n      this.treeview.emitOpen()\n    },\n    genLabel () {\n      const children = []\n\n      if (this.$scopedSlots.label) children.push(this.$scopedSlots.label(this.scopedProps))\n      else children.push(this.text)\n\n      return this.$createElement('div', {\n        slot: 'label',\n        staticClass: 'v-treeview-node__label',\n      }, children)\n    },\n    genPrependSlot () {\n      if (!this.$scopedSlots.prepend) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__prepend',\n      }, this.$scopedSlots.prepend(this.scopedProps))\n    },\n    genAppendSlot () {\n      if (!this.$scopedSlots.append) return null\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__append',\n      }, this.$scopedSlots.append(this.scopedProps))\n    },\n    genContent () {\n      const children = [\n        this.genPrependSlot(),\n        this.genLabel(),\n        this.genAppendSlot(),\n      ]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__content',\n      }, children)\n    },\n    genToggle () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__toggle',\n        class: {\n          'v-treeview-node__toggle--open': this.isOpen,\n          'v-treeview-node__toggle--loading': this.isLoading,\n        },\n        slot: 'prepend',\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => this.open())\n          },\n        },\n      }, [this.isLoading ? this.loadingIcon : this.expandIcon])\n    },\n    genCheckbox () {\n      return this.$createElement(VIcon, {\n        staticClass: 'v-treeview-node__checkbox',\n        props: {\n          color: this.isSelected || this.isIndeterminate ? this.selectedColor : undefined,\n          disabled: this.disabled,\n        },\n        on: {\n          click: (e: MouseEvent) => {\n            e.stopPropagation()\n\n            if (this.isLoading) return\n\n            this.checkChildren().then(() => {\n              // We nextTick here so that items watch in VTreeview has a chance to run first\n              this.$nextTick(() => {\n                this.isSelected = !this.isSelected\n                this.isIndeterminate = false\n\n                this.treeview.updateSelected(this.key, this.isSelected)\n                this.treeview.emitSelected()\n              })\n            })\n          },\n        },\n      }, [this.computedIcon])\n    },\n    genLevel (level: number) {\n      return createRange(level).map(() => this.$createElement('div', {\n        staticClass: 'v-treeview-node__level',\n      }))\n    },\n    genNode (): VNode {\n      const children = [this.genContent()]\n\n      if (this.selectable) children.unshift(this.genCheckbox())\n\n      if (this.hasChildren) {\n        children.unshift(this.genToggle())\n      } else {\n        children.unshift(...this.genLevel(1))\n      }\n\n      children.unshift(...this.genLevel(this.level))\n\n      return this.$createElement('div', this.setTextColor(this.isActive && this.color, {\n        staticClass: 'v-treeview-node__root',\n        class: {\n          [this.activeClass]: this.isActive,\n        },\n        on: {\n          click: () => {\n            if (this.openOnClick && this.hasChildren) {\n              this.checkChildren().then(this.open)\n            } else if (this.activatable && !this.disabled) {\n              this.isActive = !this.isActive\n              this.treeview.updateActive(this.key, this.isActive)\n              this.treeview.emitActive()\n            }\n          },\n        },\n      }), children)\n    },\n    genChild (item: any, parentIsDisabled: boolean): VNode {\n      return this.$createElement(VTreeviewNode, {\n        key: getObjectValueByPath(item, this.itemKey),\n        props: {\n          activatable: this.activatable,\n          activeClass: this.activeClass,\n          item,\n          selectable: this.selectable,\n          selectedColor: this.selectedColor,\n          color: this.color,\n          expandIcon: this.expandIcon,\n          indeterminateIcon: this.indeterminateIcon,\n          offIcon: this.offIcon,\n          onIcon: this.onIcon,\n          loadingIcon: this.loadingIcon,\n          itemKey: this.itemKey,\n          itemText: this.itemText,\n          itemDisabled: this.itemDisabled,\n          itemChildren: this.itemChildren,\n          loadChildren: this.loadChildren,\n          transition: this.transition,\n          openOnClick: this.openOnClick,\n          rounded: this.rounded,\n          shaped: this.shaped,\n          level: this.level + 1,\n          selectionType: this.selectionType,\n          parentIsDisabled,\n        },\n        scopedSlots: this.$scopedSlots,\n      })\n    },\n    genChildrenWrapper (): any {\n      if (!this.isOpen || !this.children) return null\n\n      const children = [this.children.map(c => this.genChild(c, this.disabled))]\n\n      return this.$createElement('div', {\n        staticClass: 'v-treeview-node__children',\n      }, children)\n    },\n    genTransition () {\n      return this.$createElement(VExpandTransition, [this.genChildrenWrapper()])\n    },\n  },\n\n  render (h): VNode {\n    const children = [this.genNode()]\n\n    if (this.transition) children.push(this.genTransition())\n    else children.push(this.genChildrenWrapper())\n\n    return h('div', {\n      staticClass: 'v-treeview-node',\n      class: {\n        'v-treeview-node--leaf': !this.hasChildren,\n        'v-treeview-node--click': this.openOnClick,\n        'v-treeview-node--disabled': this.disabled,\n        'v-treeview-node--rounded': this.rounded,\n        'v-treeview-node--shaped': this.shaped,\n        'v-treeview-node--selected': this.isSelected,\n        'v-treeview-node--excluded': this.treeview.isExcluded(this.key),\n      },\n      attrs: {\n        'aria-expanded': String(this.isOpen),\n      },\n    }, children)\n  },\n})\n\nexport default VTreeviewNode\n","import { getObjectValueByPath } from '../../../util/helpers'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\nexport function filterTreeItem (item: object, search: string, textKey: string): boolean {\n  const text = getObjectValueByPath(item, textKey)\n\n  return text.toLocaleLowerCase().indexOf(search.toLocaleLowerCase()) > -1\n}\n\nexport function filterTreeItems (\n  filter: TreeviewItemFunction,\n  item: any,\n  search: string,\n  idKey: string,\n  textKey: string,\n  childrenKey: string,\n  excluded: Set<string | number>\n): boolean {\n  if (filter(item, search, textKey)) {\n    return true\n  }\n\n  const children = getObjectValueByPath(item, childrenKey)\n\n  if (children) {\n    let match = false\n    for (let i = 0; i < children.length; i++) {\n      if (filterTreeItems(filter, children[i], search, idKey, textKey, childrenKey, excluded)) {\n        match = true\n      }\n    }\n\n    if (match) return true\n  }\n\n  excluded.add(getObjectValueByPath(item, idKey))\n\n  return false\n}\n","// Styles\nimport './VTreeview.sass'\n\n// Types\nimport { VNode, VNodeChildrenArrayContents, PropType } from 'vue'\n\n// Components\nimport VTreeviewNode, { VTreeviewNodeProps } from './VTreeviewNode'\n\n// Mixins\nimport Themeable from '../../mixins/themeable'\nimport { provide as RegistrableProvide } from '../../mixins/registrable'\n\n// Utils\nimport {\n  arrayDiff,\n  deepEqual,\n  getObjectValueByPath,\n} from '../../util/helpers'\nimport mixins from '../../util/mixins'\nimport { consoleWarn } from '../../util/console'\nimport {\n  filterTreeItems,\n  filterTreeItem,\n} from './util/filterTreeItems'\nimport { TreeviewItemFunction } from 'vuetify/types'\n\ntype VTreeviewNodeInstance = InstanceType<typeof VTreeviewNode>\n\ntype NodeCache = Set<string | number>\ntype NodeArray = (string | number)[]\n\ntype NodeState = {\n  parent: number | string | null\n  children: (number | string)[]\n  vnode: VTreeviewNodeInstance | null\n  isActive: boolean\n  isSelected: boolean\n  isIndeterminate: boolean\n  isOpen: boolean\n  item: any\n}\n\nexport default mixins(\n  RegistrableProvide('treeview'),\n  Themeable\n  /* @vue/component */\n).extend({\n  name: 'v-treeview',\n\n  provide (): object {\n    return { treeview: this }\n  },\n\n  props: {\n    active: {\n      type: Array as PropType<NodeArray>,\n      default: () => ([]),\n    },\n    dense: Boolean,\n    filter: Function as PropType<TreeviewItemFunction>,\n    hoverable: Boolean,\n    items: {\n      type: Array as PropType<any[]>,\n      default: () => ([]),\n    },\n    multipleActive: Boolean,\n    open: {\n      type: Array as PropType<NodeArray>,\n      default: () => ([]),\n    },\n    openAll: Boolean,\n    returnObject: {\n      type: Boolean,\n      default: false, // TODO: Should be true in next major\n    },\n    search: String,\n    value: {\n      type: Array as PropType<NodeArray>,\n      default: () => ([]),\n    },\n    ...VTreeviewNodeProps,\n  },\n\n  data: () => ({\n    level: -1,\n    activeCache: new Set() as NodeCache,\n    nodes: {} as Record<string | number, NodeState>,\n    openCache: new Set() as NodeCache,\n    selectedCache: new Set() as NodeCache,\n  }),\n\n  computed: {\n    excludedItems (): Set<string | number> {\n      const excluded = new Set<string|number>()\n\n      if (!this.search) return excluded\n\n      for (let i = 0; i < this.items.length; i++) {\n        filterTreeItems(\n          this.filter || filterTreeItem,\n          this.items[i],\n          this.search,\n          this.itemKey,\n          this.itemText,\n          this.itemChildren,\n          excluded\n        )\n      }\n\n      return excluded\n    },\n  },\n\n  watch: {\n    items: {\n      handler () {\n        const oldKeys = Object.keys(this.nodes).map(k => getObjectValueByPath(this.nodes[k].item, this.itemKey))\n        const newKeys = this.getKeys(this.items)\n        const diff = arrayDiff(newKeys, oldKeys)\n\n        // We only want to do stuff if items have changed\n        if (!diff.length && newKeys.length < oldKeys.length) return\n\n        // If nodes are removed we need to clear them from this.nodes\n        diff.forEach(k => delete this.nodes[k])\n\n        const oldSelectedCache = [...this.selectedCache]\n        this.selectedCache = new Set()\n        this.activeCache = new Set()\n        this.openCache = new Set()\n        this.buildTree(this.items)\n\n        // Only emit selected if selection has changed\n        // as a result of items changing. This fixes a\n        // potential double emit when selecting a node\n        // with dynamic children\n        if (!deepEqual(oldSelectedCache, [...this.selectedCache])) this.emitSelected()\n      },\n      deep: true,\n    },\n    active (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.activeCache, this.updateActive, this.emitActive)\n    },\n    value (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.selectedCache, this.updateSelected, this.emitSelected)\n    },\n    open (value: (string | number | any)[]) {\n      this.handleNodeCacheWatcher(value, this.openCache, this.updateOpen, this.emitOpen)\n    },\n  },\n\n  created () {\n    const getValue = (key: string | number) => this.returnObject ? getObjectValueByPath(key, this.itemKey) : key\n\n    this.buildTree(this.items)\n\n    for (const value of this.value.map(getValue)) {\n      this.updateSelected(value, true, true)\n    }\n\n    for (const active of this.active.map(getValue)) {\n      this.updateActive(active, true)\n    }\n  },\n\n  mounted () {\n    // Save the developer from themselves\n    if (this.$slots.prepend || this.$slots.append) {\n      consoleWarn('The prepend and append slots require a slot-scope attribute', this)\n    }\n\n    if (this.openAll) {\n      this.updateAll(true)\n    } else {\n      this.open.forEach(key => this.updateOpen(this.returnObject ? getObjectValueByPath(key, this.itemKey) : key, true))\n      this.emitOpen()\n    }\n  },\n\n  methods: {\n    /** @public */\n    updateAll (value: boolean) {\n      Object.keys(this.nodes).forEach(key => this.updateOpen(getObjectValueByPath(this.nodes[key].item, this.itemKey), value))\n      this.emitOpen()\n    },\n    getKeys (items: any[], keys: any[] = []) {\n      for (let i = 0; i < items.length; i++) {\n        const key = getObjectValueByPath(items[i], this.itemKey)\n        keys.push(key)\n        const children = getObjectValueByPath(items[i], this.itemChildren)\n        if (children) {\n          keys.push(...this.getKeys(children))\n        }\n      }\n\n      return keys\n    },\n    buildTree (items: any[], parent: (string | number | null) = null) {\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i]\n        const key = getObjectValueByPath(item, this.itemKey)\n        const children = getObjectValueByPath(item, this.itemChildren, [])\n        const oldNode = this.nodes.hasOwnProperty(key) ? this.nodes[key] : {\n          isSelected: false, isIndeterminate: false, isActive: false, isOpen: false, vnode: null,\n        } as NodeState\n\n        const node: any = {\n          vnode: oldNode.vnode,\n          parent,\n          children: children.map((c: any) => getObjectValueByPath(c, this.itemKey)),\n          item,\n        }\n\n        this.buildTree(children, key)\n\n        // This fixed bug with dynamic children resetting selected parent state\n        if (!this.nodes.hasOwnProperty(key) && parent !== null && this.nodes.hasOwnProperty(parent)) {\n          node.isSelected = this.nodes[parent].isSelected\n        } else {\n          node.isSelected = oldNode.isSelected\n          node.isIndeterminate = oldNode.isIndeterminate\n        }\n\n        node.isActive = oldNode.isActive\n        node.isOpen = oldNode.isOpen\n\n        this.nodes[key] = node\n\n        if (children.length) {\n          const { isSelected, isIndeterminate } = this.calculateState(key, this.nodes)\n\n          node.isSelected = isSelected\n          node.isIndeterminate = isIndeterminate\n        }\n\n        // Don't forget to rebuild cache\n        if (this.nodes[key].isSelected && (this.selectionType === 'independent' || node.children.length === 0)) this.selectedCache.add(key)\n        if (this.nodes[key].isActive) this.activeCache.add(key)\n        if (this.nodes[key].isOpen) this.openCache.add(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    calculateState (node: string | number, state: Record<string | number, NodeState>) {\n      const children = state[node].children\n      const counts = children.reduce((counts: number[], child: string | number) => {\n        counts[0] += +Boolean(state[child].isSelected)\n        counts[1] += +Boolean(state[child].isIndeterminate)\n\n        return counts\n      }, [0, 0])\n\n      const isSelected = !!children.length && counts[0] === children.length\n      const isIndeterminate = !isSelected && (counts[0] > 0 || counts[1] > 0)\n\n      return {\n        isSelected,\n        isIndeterminate,\n      }\n    },\n    emitOpen () {\n      this.emitNodeCache('update:open', this.openCache)\n    },\n    emitSelected () {\n      this.emitNodeCache('input', this.selectedCache)\n    },\n    emitActive () {\n      this.emitNodeCache('update:active', this.activeCache)\n    },\n    emitNodeCache (event: string, cache: NodeCache) {\n      this.$emit(event, this.returnObject ? [...cache].map(key => this.nodes[key].item) : [...cache])\n    },\n    handleNodeCacheWatcher (value: any[], cache: NodeCache, updateFn: Function, emitFn: Function) {\n      value = this.returnObject ? value.map(v => getObjectValueByPath(v, this.itemKey)) : value\n      const old = [...cache]\n      if (deepEqual(old, value)) return\n\n      old.forEach(key => updateFn(key, false))\n      value.forEach(key => updateFn(key, true))\n\n      emitFn()\n    },\n    getDescendants (key: string | number, descendants: NodeArray = []) {\n      const children = this.nodes[key].children\n\n      descendants.push(...children)\n\n      for (let i = 0; i < children.length; i++) {\n        descendants = this.getDescendants(children[i], descendants)\n      }\n\n      return descendants\n    },\n    getParents (key: string | number) {\n      let parent = this.nodes[key].parent\n\n      const parents = []\n      while (parent !== null) {\n        parents.push(parent)\n        parent = this.nodes[parent].parent\n      }\n\n      return parents\n    },\n    register (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      this.nodes[key].vnode = node\n\n      this.updateVnodeState(key)\n    },\n    unregister (node: VTreeviewNodeInstance) {\n      const key = getObjectValueByPath(node.item, this.itemKey)\n      if (this.nodes[key]) this.nodes[key].vnode = null\n    },\n    isParent (key: string | number) {\n      return this.nodes[key].children && this.nodes[key].children.length\n    },\n    updateActive (key: string | number, isActive: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      if (!this.multipleActive) {\n        this.activeCache.forEach(active => {\n          this.nodes[active].isActive = false\n          this.updateVnodeState(active)\n          this.activeCache.delete(active)\n        })\n      }\n\n      const node = this.nodes[key]\n      if (!node) return\n\n      if (isActive) this.activeCache.add(key)\n      else this.activeCache.delete(key)\n\n      node.isActive = isActive\n\n      this.updateVnodeState(key)\n    },\n    updateSelected (key: string | number, isSelected: boolean, isForced = false) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const changed = new Map()\n\n      if (this.selectionType !== 'independent') {\n        for (const descendant of this.getDescendants(key)) {\n          if (!getObjectValueByPath(this.nodes[descendant].item, this.itemDisabled) || isForced) {\n            this.nodes[descendant].isSelected = isSelected\n            this.nodes[descendant].isIndeterminate = false\n            changed.set(descendant, isSelected)\n          }\n        }\n\n        const calculated = this.calculateState(key, this.nodes)\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = calculated.isIndeterminate\n        changed.set(key, isSelected)\n\n        for (const parent of this.getParents(key)) {\n          const calculated = this.calculateState(parent, this.nodes)\n          this.nodes[parent].isSelected = calculated.isSelected\n          this.nodes[parent].isIndeterminate = calculated.isIndeterminate\n          changed.set(parent, calculated.isSelected)\n        }\n      } else {\n        this.nodes[key].isSelected = isSelected\n        this.nodes[key].isIndeterminate = false\n        changed.set(key, isSelected)\n      }\n\n      for (const [key, value] of changed.entries()) {\n        this.updateVnodeState(key)\n\n        if (this.selectionType === 'leaf' && this.isParent(key)) continue\n\n        value === true ? this.selectedCache.add(key) : this.selectedCache.delete(key)\n      }\n    },\n    updateOpen (key: string | number, isOpen: boolean) {\n      if (!this.nodes.hasOwnProperty(key)) return\n\n      const node = this.nodes[key]\n      const children = getObjectValueByPath(node.item, this.itemChildren)\n\n      if (children && !children.length && node.vnode && !node.vnode.hasLoaded) {\n        node.vnode.checkChildren().then(() => this.updateOpen(key, isOpen))\n      } else if (children && children.length) {\n        node.isOpen = isOpen\n\n        node.isOpen ? this.openCache.add(key) : this.openCache.delete(key)\n\n        this.updateVnodeState(key)\n      }\n    },\n    updateVnodeState (key: string | number) {\n      const node = this.nodes[key]\n\n      if (node && node.vnode) {\n        node.vnode.isSelected = node.isSelected\n        node.vnode.isIndeterminate = node.isIndeterminate\n        node.vnode.isActive = node.isActive\n        node.vnode.isOpen = node.isOpen\n      }\n    },\n    isExcluded (key: string | number) {\n      return !!this.search && this.excludedItems.has(key)\n    },\n  },\n\n  render (h): VNode {\n    const children: VNodeChildrenArrayContents = this.items.length\n      ? this.items.map(item => {\n        const genChild = VTreeviewNode.options.methods.genChild.bind(this)\n\n        return genChild(item, getObjectValueByPath(item, this.itemDisabled))\n      })\n      /* istanbul ignore next */\n      : this.$slots.default! // TODO: remove type annotation with TS 3.2\n\n    return h('div', {\n      staticClass: 'v-treeview',\n      class: {\n        'v-treeview--hoverable': this.hoverable,\n        'v-treeview--dense': this.dense,\n        ...this.themeClasses,\n      },\n    }, children)\n  },\n})\n"],"sourceRoot":""}